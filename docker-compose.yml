services:
  mongo:
    image: mongo:latest
    container_name: pedido-db
    restart: always
    env_file:
      .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_DB_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_DB_PASSWORD}"
    ports:
      - "27017:27017"
    networks:
      - orchestrator-saga

  produto-db:
    image: postgres
    container_name: produto-db
    env_file:
      .env
    environment:
      POSTGRES_DB: produto-db
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - 5432:5432
    networks:
      - orchestrator-saga

  pagamento-db:
    image: postgres
    container_name: pagamento-db
    env_file:
      .env
    environment:
      POSTGRES_DB: pagamento-db
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - 5433:5432
    networks:
      - orchestrator-saga

  estoque-db:
    image: postgres
    container_name: estoque-db
    env_file:
      .env
    environment:
      POSTGRES_DB: estoque-db
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - 5434:5432
    networks:
      - orchestrator-saga

  kafka:
    container_name: kafka
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    networks:
      - orchestrator-saga
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    volumes:
      - ./data/kafka/data:/var/lib/kafka/data

  redpanda-console:
    container_name: redpanda
    image: docker.redpanda.com/vectorized/console:latest
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    ports:
      - "8081:8080"
    networks:
      - orchestrator-saga
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:29092"]
    depends_on:
      - "kafka"

networks:
  orchestrator-saga:
    driver: bridge