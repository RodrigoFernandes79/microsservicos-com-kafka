spring.application.name=estoque_ms
server.port=8092

spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5434}/${DB_NAME:estoque-db}
spring.datasource.username={POSTGRES_USER}
spring.datasource.password={POSTGRES_PASSWORD}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.jpa.show-sql=true
spring.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.format_sql=true

# Configuração de acesso ao Apache Kafka

# Definindo o cluster de servidores Kafka, utilizando uma variável de ambiente para o endereço do broker.
# Caso a variável de ambiente KAFKA_BROKER não esteja definida, o valor padrão será "localhost:9092".
spring.kafka.boostrap-servers=${KAFKA_BROKER:localhost:9092}

# Tópico Kafka utilizado para a comunicação do orquestrador (gerenciamento de fluxo de eventos).
spring.kafka.topic.orchestrator=orchestrator

# Tópico Kafka para comunicação de sucesso na validação de pagamento.
# Quando o pagamento for validado com sucesso, uma mensagem será publicada neste tópico.
spring.kafka.topic.estoque-sucess=estoque-sucess

# Tópico Kafka para comunicação de falha na validação de pagamento.
# Caso ocorra uma falha na validação do pagamento, uma mensagem será publicada neste tópico.
spring.kafka.topic.estoque-fail=estoque-fail

# Definindo o grupo de consumidores Kafka.
# Todos os consumidores que pertencem ao grupo "grupo-pagamento" irão consumir as mensagens dos tópicos configurados.
spring.kafka.consumer.group-id=grupo-pagamento

# Configuração de offset do consumidor Kafka.
# Ao escolher "latest", o consumidor começa a processar a partir do último evento publicado no tópico.
spring.kafka.consumer.auto-offset-reset=latest

# Desabilitando logs das mensagens do Kafka para reduzir a verbosidade nos logs.
logging.level.org.apache.kafka=OFF

