spring.application.name=pagamento_ms
server.port=8091
spring.config.import=optional:file:.env[.properties]

spring.datasource.url=jdbc:postgresql://${HOST_DB:localhost}:${DB_PORT:5433}/${DB_NAME:pagamento-db}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.format_sql=true

# Configuracao de acesso ao Apache Kafka

# Definindo o cluster de servidores Kafka, utilizando uma variavel de ambiente para o endereco do broker.
# Caso a variavel de ambiente KAFKA_BROKER nao esteja definida, o valor padrao sera "localhost:9092".
spring.kafka.bootstrap-servers=${KAFKA_BROKER:localhost:9092}

# Topico Kafka utilizado para a comunicacao do orquestrador (gerenciamento de fluxo de eventos).
spring.kafka.topic.orchestrator=orchestrator

# Topico Kafka para comunicacao de sucesso na validacao de pagamento.
# Quando o pagamento for validado com sucesso, uma mensagem sera publicada neste topico.
spring.kafka.topic.pagamento-sucess=pagamento-sucess

# Topico Kafka para comunicacao de falha na validacao de pagamento.
# Caso ocorra uma falha na validacao do pagamento, uma mensagem sera publicada neste topico.
spring.kafka.topic.pagamento-fail=pagamento-fail

# Definindo o grupo de consumidores Kafka.
# Todos os consumidores que pertencem ao grupo "grupo-pagamento" irao consumir as mensagens dos topicos configurados.
spring.kafka.consumer.group-id=grupo-pagamento

# Configuracao de offset do consumidor Kafka.
# Ao escolher "latest", o consumidor comeca a processar a partir do ultimo evento publicado no topico.
spring.kafka.consumer.auto-offset-reset=latest

# Desabilitando logs das mensagens do Kafka para reduzir a verbosidade nos logs.
logging.level.org.apache.kafka=OFF
